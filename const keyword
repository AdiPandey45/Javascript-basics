The const keyword in JavaScript is used to declare variables whose values are not intended to be reassigned after their initial assignment. It was introduced in ES6 (ECMAScript 2015), along with let, and is an essential part of modern JavaScript programming.

Key Features of const
1. Block Scope
Like let, variables declared with const are block-scoped, meaning they are accessible only within the block {} where they are defined.

Example:
   
{  
  const x = 10;   
  console.log(x); // 10  
}
console.log(x); // ReferenceError: x is not defined

2. No Reassignment
A variable declared with const must be initialized at the time of declaration and cannot be reassigned.

Example:

const x = 10;
x = 20; // TypeError: Assignment to constant variable
However, if the variable is an object or array, you can modify the contents of the object or array but cannot reassign the variable itself.

Example:

const arr = [1, 2, 3];
arr.push(4); 
console.log(arr); // [1, 2, 3, 4]

arr = [5, 6]; // TypeError: Assignment to constant variable
3. No Redeclaration
You cannot redeclare a const variable in the same scope.

Example:

const a = 10;
const a = 20; // SyntaxError: Identifier 'a' has already been declared
4. Hoisting with Temporal Dead Zone
Similar to let, const variables are hoisted to the top of their scope but remain uninitialized until their declaration is encountered. Accessing them before initialization results in a ReferenceError.

Example:

console.log(a); // ReferenceError: Cannot access 'a' before initialization
const a = 10;
5. Useful for Constants
const is often used to define constants or values that shouldn't change.

Example:

const PI = 3.14159;
console.log(PI); // 3.14159

PI = 3.14; // TypeError: Assignment to constant variable
